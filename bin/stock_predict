#!/usr/bin/env python
import os
os.environ['TF_CPP_MIN_LOG_LEVEL']='2'
import datetime
import logging
import time
from future.model.cnn_three_mean import ThreeMeanStockModel
from future.model.cnn_one_mean import OneMeanStockModel
from future.model.cnn_one_radio import OneRadioStockModel
from future.stock.stock import set_buy_list, get_buy_list
import pandas as pd
from future.utils.config import get_config
import os.path
import sys

def predict(date):
    result = {}
    print("Predict Stock at " + date)
    # Model Three
    print("=========================================================")
    print("MODEL THREE HISTORY MEAN")
    model = ThreeMeanStockModel()
    for r in model.predict(date):
        if r:
            result.update(r)

    #Model 1
    print("=========================================================")
    print("MODEL ONE HISTORY MEAN")
    model = OneMeanStockModel()
    for r in model.predict(date):
        if r:
            result.update(r)

    print("=========================================================")
    print("MODEL THREE HISTORY RADIO")
    model = OneRadioStockModel()
    for r in model.predict(date):
        if r:
            result.update(r)

    if not result:
        return

    df = pd.DataFrame.from_dict(result)

    down_cols = [col for col in df.columns if col.startswith('0')]
    df['down'] = df[down_cols].sum(axis=1)

    up_cols = [col for col in df.columns if col.startswith('2')]
    df['up'] = df[up_cols].sum(axis=1)

    # Add results to it
    from future.features import get_eval_dataset
    a, target = get_eval_dataset('history', date)
    df = pd.concat([df, target], axis=1)
    result_path = get_config('path', 'results')
    df.to_csv(os.path.join(result_path, '%s.csv' % (date)), index=True)

if __name__ == "__main__":
        if len(sys.argv) == 2:
            day = sys.argv[1]
        else:
            day = datetime.date.today()
        predict(str(day))
